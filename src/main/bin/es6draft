#!/bin/bash
#
# Copyright (c) 2012-2015 Andr√© Bargull
# Alle Rechte vorbehalten / All Rights Reserved.  Use is subject to license terms.
#
# <https://github.com/anba/es6draft>
#

#
# Description:
# Helper script to start the simple REPL
#

IS_CYGWIN=false
case "`uname`" in
  "CYGWIN"*) IS_CYGWIN=true ;;
esac

# Determine Java start command
if [[ -z "$JAVA_HOME" ]] ; then
  JAVA_CMD="java"
else
  if $IS_CYGWIN ; then
    JAVA_HOME=`cygpath -u "${JAVA_HOME}"`
  fi
  JAVA_CMD="${JAVA_HOME}/bin/java"
fi

# Set default Java options
JAVA_OPTS="${JAVA_OPTS:-""}"
JAVA_OPTS="${JAVA_OPTS} -ea -server -XX:+TieredCompilation"

# Invokedynamic implementation is buggy prior to Java 1.7.0_45
USE_BOOTCP=false
JAVA_VERSION=`${JAVA_CMD} -version 2>&1 | sed 's/java version "\([0-9._]*\).*"/\1/; 1q'`
if [[ "$JAVA_VERSION" < "1.7.0_45" ]] ; then
  JAVA_OPTS="${JAVA_OPTS} -esa"
  USE_BOOTCP=true
fi

# Fully qualified name to main class
MAINCLASS="@mainClass@"

# distribution, shaded, development
EXEC_MODE="@exec.mode@"

# Determine base directory and compute classpath
REL_PATH="$( dirname "$0" )"
case "$EXEC_MODE" in
  distribution)
    BASE_DIR="${REL_PATH}/.."
    CLASSPATH="${BASE_DIR}/@exec.name@.jar"
  ;;
  shaded)
    BASE_DIR="${REL_PATH}/../target"
    CLASSPATH="${BASE_DIR}/@exec.name@.jar"
  ;;
  development)
    BASE_DIR="${REL_PATH}/../target"
    CLASSES="${BASE_DIR}/classes"
    if $USE_BOOTCP ; then
      DEP_DIR="${BASE_DIR}/dependencies"
      DEPENDENCIES=`ls -1 "${DEP_DIR}" | sed 's,^,'"${DEP_DIR}"'/&,' | sed ':a;{N; s/\n/:/; ta}'`
    else
      DEPENDENCIES="${BASE_DIR}/dependencies/*"
    fi
    CLASSPATH="${CLASSES}:${DEPENDENCIES}"
  ;;
  *)
    echo "Unsupported execution mode: ${EXEC_MODE}"
    exit 1
  ;;
esac

if $IS_CYGWIN ; then
  CLASSPATH=`cygpath -wp "${CLASSPATH}"`
fi

# Adjust classpath based on current Java version
if $USE_BOOTCP ; then
  JAVA_CLASSPATH="-Xbootclasspath/a:${CLASSPATH}"
else
  JAVA_CLASSPATH="-cp ${CLASSPATH}"
fi

# Pass default encoding on cygwin
if $IS_CYGWIN ; then
  JAVA_OPTS="${JAVA_OPTS} -Dfile.encoding=$(locale charmap)"
fi

JLINE_ENABLED=true
for opt in "$@" ; do
  case "$opt" in
    --no-jline)
      echo "no-jline option enabled"
      JLINE_ENABLED=false
    ;;
    -*) ;;
    # Ignore arguments after double dash or first non-option argument
    --) break ;;
    *) break ;;
  esac
done

# Configure JLine terminal settings
CYGWIN_TERM=false
JLINE_TERMINAL="unix"
if $IS_CYGWIN ; then
  case "$TERM" in
    rxvt* | xterm*)
      CYGWIN_TERM=true
    ;;
    cygwin*)
      if [[ "$JAVA_VERSION" < "1.7.0_45" ]] ; then
        JLINE_TERMINAL="none"
      else
        JLINE_TERMINAL="windows"
      fi
    ;;
  esac
fi
JAVA_OPTS="${JAVA_OPTS} -Djline.terminal=${JLINE_TERMINAL}"

JAVA_OPTS_EXTRA=""
function configureTerminal() {
  if [[ $CYGWIN_TERM == "true" && $JLINE_ENABLED == "true" ]] ; then
    # see JLine UnixTerminal
    stty -icanon min 1 -icrnl -inlcr -ixon -echo > /dev/null 2>&1
    JAVA_OPTS_EXTRA="-Djline.terminal.settings=\"$(stty -a < /dev/tty)\""
    trap restoreTerminal INT
  fi
}

function restoreTerminal() {
  EXIT_STATUS=$?
  if [[ $CYGWIN_TERM == "true" && $JLINE_ENABLED == "true" ]] ; then
    stty sane > /dev/null 2>&1
  fi
  exit $EXIT_STATUS
}

function collectOptions() {
  JAVA_OPTS=("$@")
}

# Start application
configureTerminal
eval collectOptions "$JAVA_OPTS" "$JAVA_OPTS_EXTRA"
"${JAVA_CMD}" "${JAVA_OPTS[@]}" ${JAVA_CLASSPATH} "${MAINCLASS}" "$@"
restoreTerminal
